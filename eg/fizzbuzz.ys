# usage:\ lingy fizzbuzz [<count>] [<fizzbuzz fn \#>]

main(count=100, impl="1"):
  - fizzbuzz =: "fizzbuzz-$impl"
    function =: resolve(symbol(fizzbuzz))
    result =: function(number(count))
  - if (not (getenv "YAMLSCRIPT_TEST")):
    - println: "Running function '$fizzbuzz' with count=$count"
  - map(println, result)

fizzbuzz-1(n):
  map:
  - fn([x]
      cond(
        zero?(mod(x 15)) "FizzBuzz"
        zero?(mod(x 5))  "Buzz"
        zero?(mod(x 3))  "Fizz"
        :else x))
  - range(1, inc(n))

fizzbuzz-2(n):
  loop:
  - \[i 1, l []]
  - if (i <= n):
    - recur:
      - inc(i)
      - conj:
        - l
        - cond(
            zero?(mod(i 15)) "FizzBuzz"
            zero?(mod(i 5))  "Buzz"
            zero?(mod(i 3))  "Fizz"
            :else i)
    - l

fizzbuzz-3(n):
  (doseq [x (range 1 (inc n))]
    (println x
      (str
        (when (zero? (mod x 3)) "Fizz")
        (when (zero? (mod x 5)) "Buzz"))))
